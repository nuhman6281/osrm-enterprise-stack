version: "3.8"

services:
  # Primary OSRM Backend Instance
  osrm-backend-1:
    image: ghcr.io/project-osrm/osrm-backend:latest
    container_name: osrm-backend-1
    volumes:
      - ./data:/data
      - ./profiles:/profiles
    command: osrm-routed --algorithm mld --max-viaroute-size 10000 --max-trip-size 100 --max-table-size 1000 /data/berlin-latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:5000/route/v1/driving/13.388860,52.517037;13.397634,52.529407",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - osrm-network

  # Secondary OSRM Backend Instance for Load Balancing
  osrm-backend-2:
    image: ghcr.io/project-osrm/osrm-backend:latest
    container_name: osrm-backend-2
    volumes:
      - ./data:/data
      - ./profiles:/profiles
    command: osrm-routed --algorithm mld --max-viaroute-size 10000 --max-trip-size 100 --max-table-size 1000 /data/berlin-latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:5000/route/v1/driving/13.388860,52.517037;13.397634,52.529407",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - osrm-network

  # OSRM Frontend
  osrm-frontend:
    image: osrm/osrm-frontend:latest
    container_name: osrm-frontend
    ports:
      - "9966:9966"
    environment:
      - OSRM_BACKEND=http://nginx-lb:80
      - OSRM_CENTER=52.520008,13.404954
      - OSRM_ZOOM=13
      - OSRM_LANGUAGE=en
      - OSRM_LABEL=Car (fastest)
    depends_on:
      - nginx-lb
    restart: unless-stopped
    networks:
      - osrm-network

  # Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: osrm-load-balancer
    volumes:
      - ./nginx/nginx-lb.conf:/etc/nginx/nginx.conf
    depends_on:
      - osrm-backend-1
      - osrm-backend-2
    restart: unless-stopped
    networks:
      - osrm-network

  # Main Nginx Proxy with SSL
  nginx-proxy:
    image: nginx:alpine
    container_name: osrm-proxy
    ports:
      - "80:80"
      - "443:443"
      - "5001:5000"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - nginx-lb
      - osrm-frontend
    restart: unless-stopped
    networks:
      - osrm-network

  # Redis for Caching
  redis:
    image: redis:alpine
    container_name: osrm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - osrm-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: osrm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    networks:
      - osrm-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: osrm-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - osrm-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: osrm-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    restart: unless-stopped
    networks:
      - osrm-network

  # Custom API Service
  osrm-api:
    build: ./api
    container_name: osrm-api
    ports:
      - "3001:3001"
    environment:
      - OSRM_BACKEND_URL=http://nginx-lb:80
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
    depends_on:
      - nginx-lb
      - redis
    restart: unless-stopped
    volumes:
      - ./api:/app
      - /app/node_modules
    networks:
      - osrm-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  osrm-network:
    driver: bridge
