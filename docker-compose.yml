version: "3.8"

services:
  # OSRM Backend Services (Load Balanced)
  osrm-backend-1:
    image: ghcr.io/project-osrm/osrm-backend:v6.0.0
    container_name: osrm-backend-1
    volumes:
      - ./data:/data:ro
    command: osrm-routed --algorithm mld /data/map.osrm
    ports:
      - "5001:5000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - osrm-network

  osrm-backend-2:
    image: ghcr.io/project-osrm/osrm-backend:v6.0.0
    container_name: osrm-backend-2
    volumes:
      - ./data:/data:ro
    command: osrm-routed --algorithm mld /data/map.osrm
    ports:
      - "5002:5000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - osrm-network

  # Enhanced API Service
  osrm-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: osrm-enterprise-api
    environment:
      - NODE_ENV=production
      - PORT=3000
      - OSRM_BACKEND_URL=http://nginx-lb:80
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
    ports:
      - "3003:3000"
    depends_on:
      - redis
      - osrm-backend-1
      - osrm-backend-2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./api/logs:/app/logs
    networks:
      - osrm-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: osrm-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - osrm-network

  # Load Balancer for OSRM Backends
  nginx-lb:
    image: nginx:alpine
    container_name: osrm-load-balancer
    volumes:
      - ./nginx/load-balancer.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - osrm-backend-1
      - osrm-backend-2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - osrm-network

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: osrm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./demo:/usr/share/nginx/html:ro
    depends_on:
      - osrm-api
      - nginx-lb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - osrm-network

  # Frontend Demo
  frontend:
    build:
      context: ./demo
      dockerfile: Dockerfile
    container_name: osrm-frontend
    ports:
      - "9966:80"
    volumes:
      - ./demo:/usr/share/nginx/html:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - osrm-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: osrm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    networks:
      - osrm-network

  grafana:
    image: grafana/grafana:latest
    container_name: osrm-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - osrm-network

  # Exporters for monitoring
  node-exporter:
    image: prom/node-exporter:latest
    container_name: osrm-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    restart: unless-stopped
    networks:
      - osrm-network

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: osrm-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - osrm-network

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: osrm-nginx-exporter
    ports:
      - "9113:9113"
    command:
      - "-nginx.scrape-uri=http://nginx/nginx_status"
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - osrm-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  osrm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
